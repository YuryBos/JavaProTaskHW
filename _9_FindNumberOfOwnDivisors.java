package All_Tasks_up_to_24;

public class _9_FindNumberOfOwnDivisors {
    public static void main(String[] args) {
        int[] array = {1, 128, 127, 256, 87, 512, 1024, 2048, 4096,
                8192, 44, 48, 55, 66, 77, 88, 99, 111, 112, 115, 122, 16384, 128, 32768, 65536, 131072, 262144,};
        findNumberOfOwnDivisors(array);
    }

    //    3. Дан массив чисел. Найти число состоящее из собственных делителей.
    //    Например, число 128 состоит из 1 2 и 8. 128 % 1 == 0 , 128 % 2 == 0 и 128 % 8 == 0. Вот такие числа надо найти.

    // 1. Перебрать массив
    // 2. Получить строку из числа
    // 3. Перебрать строку
    // 4. Получить число из строки
    // 5. Проверить делится ли число на число из строки
    // 6. Если делится, то добавить в список (или задать флаг)
    // 7. Проверить, что список содержит все цифры из числа (или флаг установлен)
    // 8. Если содержит, то вывести число
    // 9. Если нет, то перейти к следующему числу

    public static void findNumberOfOwnDivisors(int[] array) {
        for (int i = 0; i < array.length; i++) {
            String number = String.valueOf(array[i]); // получаем строку из числа
            boolean isDivisible = true; // флаг, который будет устанавливаться в true, если все цифры делят число без остатка
            for (int j = 0; j < number.length(); j++) { // перебираем строку
                int digit = Integer.parseInt(String.valueOf(number.charAt(j))); // получаем цифру из строки
                if (digit == 0 || array[i] % digit != 0) { 
                    isDivisible = false; // если цифра равна 0 или не делит число без остатка, устанавливаем флаг в false
                    break;
                }
            }
            if (isDivisible) {
                System.out.println(array[i]); // выводим число, если все его цифры делят число без остатка
            }
        }
    }
}
